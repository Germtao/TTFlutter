import '../index.dart';import 'package:flukit/flukit.dart';class HomeRoute extends StatefulWidget {  @override  _HomeRouteState createState() => _HomeRouteState();}class _HomeRouteState extends State<HomeRoute> {  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text(GmLocalizations.of(context).home),      ),      body: _buildBody(), // 构建主页面      drawer: MyDrawer(), // 抽屉菜单    );  }  Widget _buildBody() {    UserModel userModel = Provider.of(context);    if (!userModel.isLogin) {      // 用户未登陆，显示登陆按钮      return Center(        child: RaisedButton(          child: Text(GmLocalizations.of(context).login),          onPressed: () => Navigator.of(context).pushNamed('login'),        ),      );    } else {      // 已登录，则显示项目列表      return InfiniteListView(        onRetrieveData: (int page, List<Repo> items, bool refresh) async {          var data = await Git(context).getRepos(            refresh: refresh,            queryParameters: {              'page': page,              'page_size': 20,            },          );          // 把请求到的新数据添加到items中          items.addAll(data);          return data.length > 0 && data.length % 20 == 0;        },        itemBuilder: (List list, int index, BuildContext context) {          // 项目信息列表项          return RepoItem(list[index]);        },      );    }  }}class MyDrawer extends StatelessWidget {  const MyDrawer({Key key}) : super(key: key);  @override  Widget build(BuildContext context) {    return Drawer(      child: MediaQuery.removePadding(          context: context,          removeTop: true, // DrawerHeader consumes top MediaQuery padding          child: Column(            crossAxisAlignment: CrossAxisAlignment.start,            children: [              _buildHeader(), // 构建抽屉菜单头部              Expanded(child: _buildMenus()), // 构建功能菜单            ],          ),      ),    );  }  /// 构建抽屉菜单头部  Widget _buildHeader() {    return Consumer<UserModel>(      builder: (BuildContext context, UserModel value, Widget child) {        return GestureDetector(          child: Container(            color: Theme.of(context).primaryColor,            padding: EdgeInsets.only(top: 40, bottom: 20),            child: Row(              children: [                Padding(                  padding: const EdgeInsets.symmetric(horizontal: 16.0),                  child: ClipOval(                    // 如果已登录，则显示用户头像；若未登录，则显示默认头像                    child: value.isLogin ? gmAvatar(value.user.avatar_url, width: 80) : Image.asset('imgs/avatar-default.png', width: 80,),                  ),                ),                Text(                  value.isLogin ? value.user.login : GmLocalizations.of(context).login,                  style: TextStyle(                    fontWeight: FontWeight.bold,                    color: Colors.white,                  ),                ),              ],            ),          ),          onTap: () {            if (!value.isLogin) Navigator.of(context).pushNamed('login');          },        );      },    );  }  /// 构建功能菜单  Widget _buildMenus() {    return Consumer(      builder: (BuildContext context, UserModel value, Widget child) {        var gm = GmLocalizations.of(context);        return ListView(          children: [            ListTile(              leading: const Icon(Icons.color_lens),              title: Text(gm.theme),              onTap: () => Navigator.of(context).pushNamed('themes'),            ),            ListTile(              leading: const Icon(Icons.language),              title: Text(gm.language),              onTap: () => Navigator.of(context).pushNamed('language'),            ),            if (value.isLogin) ListTile(              leading: const Icon(Icons.power_settings_new),              title: Text(gm.logout),              onTap: () {                showDialog(                  context: context,                  builder: (ctx) {                    // 退出账号前先弹二次确认窗                    return AlertDialog(                      content: Text(gm.logoutTip),                      actions: [                        FlatButton(                          child: Text(gm.cancel),                          onPressed: () => Navigator.pop(context),                        ),                        FlatButton(                          child: Text(gm.yes),                          onPressed: () {                            //该赋值语句会触发MaterialApp rebuild                            value.user = null;                            Navigator.pop(context);                          },                        ),                      ],                    );                  },                );              },            ),          ],        );      },    );  }}